{"ast":null,"code":"import QRCode from\"qrcode.react\";import jsQR from\"jsqr\";import axios from\"axios\";import React,{useState,useEffect}from\"react\";import web3 from\"../../utils/web3\";import InventoryPayment from\"../../contracts/InventoryPayment.json\";import{toast,ToastContainer}from\"react-toastify\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function QRCodeGenerator(){const baseURL=process.env.REACT_APP_API_URL;const[inputData,setInputData]=useState(\"\");const[qrData,setQrData]=useState(\"\");const generateQRCode=()=>{setQrData(inputData);};// const jsonData = {\n//   \"orderNo\": 1,\n//   \"receivedProducts\": [\n//     {\n//       \"productId\": 1,\n//       \"productQtyOrder\": 50,\n//       \"productQtyReceived\": 40,\n//       \"productPrice\": 20\n//     },\n//     {\n//       \"productId\": 2,\n//       \"productQtyOrder\": 50,\n//       \"productQtyReceived\": 40,\n//       \"productPrice\": 10\n//     }\n//   ]\n// }\nconst handleReceivedOrder=async(orderNo,orderDetails)=>{try{const receivedOrderProductDetails=JSON.stringify(orderDetails);const requestBody={orderNo,receivedOrderProductDetails};await axios.post(\"\".concat(baseURL,\"/api/order/received\"),requestBody);toast.success(\"Successfully Received Order\");}catch(error){console.log(error);}};const handleFileUpload=event=>{const file=event.target.files[0];const reader=new FileReader();reader.onload=e=>{const img=new Image();img.onload=()=>{const canvas=document.createElement(\"canvas\");const ctx=canvas.getContext(\"2d\");canvas.width=img.width;canvas.height=img.height;ctx.drawImage(img,0,0);const imageData=ctx.getImageData(0,0,canvas.width,canvas.height);try{const qrCode=jsQR(imageData.data,imageData.width,imageData.height);if(qrCode&&qrCode.data){const receivedOrderDetails=JSON.parse(qrCode.data);if(receivedOrderDetails.orderNo&&receivedOrderDetails.receivedProducts){handleReceivedOrder(receivedOrderDetails.orderNo,receivedOrderDetails.receivedProducts);}}else{console.error(\"No QR code found in the uploaded image.\");}}catch(error){console.error(\"Error parsing QR code data:\",error);// Handle parsing error here, such as displaying an error message to the user\n}};img.src=e.target.result;};reader.readAsDataURL(file);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:inputData,onChange:e=>setInputData(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:generateQRCode,children:\"Generate QR Code\"}),qrData&&/*#__PURE__*/_jsx(QRCode,{value:qrData}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\"image/*\",onChange:handleFileUpload})]});}export default QRCodeGenerator;","map":{"version":3,"names":["QRCode","jsQR","axios","React","useState","useEffect","web3","InventoryPayment","toast","ToastContainer","jsx","_jsx","jsxs","_jsxs","QRCodeGenerator","baseURL","process","env","REACT_APP_API_URL","inputData","setInputData","qrData","setQrData","generateQRCode","handleReceivedOrder","orderNo","orderDetails","receivedOrderProductDetails","JSON","stringify","requestBody","post","concat","success","error","console","log","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","img","Image","canvas","document","createElement","ctx","getContext","width","height","drawImage","imageData","getImageData","qrCode","data","receivedOrderDetails","parse","receivedProducts","src","result","readAsDataURL","children","type","value","onChange","onClick","accept"],"sources":["D:/Personal/Hardik Project/inventorypaymentsystem/src/components/order/QRCodeGenerator.js"],"sourcesContent":["import QRCode from \"qrcode.react\";\r\nimport jsQR from \"jsqr\";\r\nimport axios from \"axios\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport web3 from \"../../utils/web3\";\r\nimport InventoryPayment from \"../../contracts/InventoryPayment.json\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\n\r\nfunction QRCodeGenerator() {\r\n  const baseURL = process.env.REACT_APP_API_URL;\r\n  const [inputData, setInputData] = useState(\"\");\r\n  const [qrData, setQrData] = useState(\"\");\r\n\r\n\r\n  const generateQRCode = () => {\r\n    setQrData(inputData);\r\n  };\r\n\r\n  // const jsonData = {\r\n  //   \"orderNo\": 1,\r\n  //   \"receivedProducts\": [\r\n  //     {\r\n  //       \"productId\": 1,\r\n  //       \"productQtyOrder\": 50,\r\n  //       \"productQtyReceived\": 40,\r\n  //       \"productPrice\": 20\r\n  //     },\r\n  //     {\r\n  //       \"productId\": 2,\r\n  //       \"productQtyOrder\": 50,\r\n  //       \"productQtyReceived\": 40,\r\n  //       \"productPrice\": 10\r\n  //     }\r\n  //   ]\r\n  // }\r\n\r\n  const handleReceivedOrder = async (orderNo, orderDetails) => {\r\n    try {\r\n      const receivedOrderProductDetails = JSON.stringify(orderDetails);\r\n\r\n      const requestBody = {\r\n        orderNo,\r\n        receivedOrderProductDetails,\r\n      };\r\n\r\n      await axios.post(`${baseURL}/api/order/received`, requestBody);\r\n\r\n      toast.success(\"Successfully Received Order\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (e) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        const canvas = document.createElement(\"canvas\");\r\n        const ctx = canvas.getContext(\"2d\");\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        ctx.drawImage(img, 0, 0);\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n        try {\r\n          const qrCode = jsQR(\r\n            imageData.data,\r\n            imageData.width,\r\n            imageData.height\r\n          );\r\n\r\n          if (qrCode && qrCode.data) {\r\n            const receivedOrderDetails = JSON.parse(qrCode.data);\r\n            if (\r\n              receivedOrderDetails.orderNo &&\r\n              receivedOrderDetails.receivedProducts\r\n            ) {\r\n              handleReceivedOrder(\r\n                receivedOrderDetails.orderNo,\r\n                receivedOrderDetails.receivedProducts\r\n              );\r\n            }\r\n          } else {\r\n            console.error(\"No QR code found in the uploaded image.\");\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error parsing QR code data:\", error);\r\n          // Handle parsing error here, such as displaying an error message to the user\r\n        }\r\n      };\r\n      img.src = e.target.result;\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={inputData}\r\n        onChange={(e) => setInputData(e.target.value)}\r\n      />\r\n      <button onClick={generateQRCode}>Generate QR Code</button>\r\n      {qrData && <QRCode value={qrData} />}\r\n      <br />\r\n      <hr />\r\n      <input type=\"file\" accept=\"image/*\" onChange={handleFileUpload} />\r\n    </div>\r\n  );\r\n}\r\nexport default QRCodeGenerator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}